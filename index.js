const fs = require('fs');
const csv = require('csv-parser');
const sqlite3 = require('sqlite3').verbose();

// Database path
const DB_PATH = './alabama.db';

// CSV files
const ELECTRICIAN_CSV = './Outscraper-20250307092319s54_electrician (1).csv';
const HVAC_CSV = './Outscraper-20250309212621xs46_hvac_contractor - Generated by Outscraper Â© (1).csv';

// Create or open the database
const db = new sqlite3.Database(DB_PATH, (err) => {
  if (err) {
    console.error('Error opening database:', err.message);
    process.exit(1);
  }
  console.log('Connected to the SQLite database.');
  
  // Enable foreign keys
  db.run('PRAGMA foreign_keys = ON');
  
  // Create tables
  createTables();
});

// Create database tables
function createTables() {
  // Create business_front_end table
  db.run(`
    CREATE TABLE IF NOT EXISTS business_front_end (
      slug TEXT PRIMARY KEY,
      name TEXT,
      phone TEXT,
      street TEXT,
      city TEXT,
      postal_code TEXT,
      state TEXT,
      latitude REAL,
      longitude REAL,
      rating REAL,
      reviews INTEGER,
      review_link TEXT,
      working_hours TEXT,
      logo TEXT,
      location_link TEXT,
      location_review_link TEXT,
      email TEXT,
      facebook TEXT
    )
  `, (err) => {
    if (err) {
      console.error('Error creating business_front_end table:', err.message);
      return;
    }
    
    // Create business_details table with foreign key reference
    db.run(`
      CREATE TABLE IF NOT EXISTS business_details (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        slug TEXT,
        site TEXT,
        enricher_carrier_type TEXT,
        photo_count INTEGER,
        about TEXT,
        verified INTEGER,
        FOREIGN KEY (slug) REFERENCES business_front_end (slug)
      )
    `, (err) => {
      if (err) {
        console.error('Error creating business_details table:', err.message);
        return;
      }
      
      // Start processing CSV files
      processCSVFiles();
    });
  });
}

// Process both CSV files
function processCSVFiles() {
  console.log('Starting to process CSV files...');
  
  // Keep track of slugs to avoid duplicates
  const existingSlugs = new Set();
  
  // Process the electrician CSV first
  processFile(ELECTRICIAN_CSV, 'electrician', existingSlugs, () => {
    // Then process the HVAC CSV
    processFile(HVAC_CSV, 'hvac', existingSlugs, () => {
      console.log('All CSV files processed successfully.');
      // Close the database connection when done
      db.close((err) => {
        if (err) {
          console.error('Error closing database:', err.message);
        } else {
          console.log('Database connection closed.');
        }
      });
    });
  });
}

// Generate a slug from a business name
function generateSlug(name, existingSlugs) {
  if (!name) return null;
  
  // Convert to lowercase, remove non-alphanumeric characters, and replace spaces with empty string
  let slug = name.toLowerCase().replace(/[^a-z0-9 ]/g, '').replace(/ /g, '');
  
  // If the slug is empty after cleaning, return null
  if (!slug) return null;
  
  // Check if slug already exists
  if (!existingSlugs.has(slug)) {
    existingSlugs.add(slug);
    return slug;
  }
  
  // If slug exists, append a number
  let counter = 1;
  let newSlug = `${slug}${counter}`;
  
  while (existingSlugs.has(newSlug)) {
    counter++;
    newSlug = `${slug}${counter}`;
  }
  
  existingSlugs.add(newSlug);
  return newSlug;
}

// Process a CSV file and insert data into the database
function processFile(filePath, fileType, existingSlugs, callback) {
  console.log(`Processing ${fileType} CSV file: ${filePath}`);
  
  let businesses = [];
  
  fs.createReadStream(filePath)
    .pipe(csv())
    .on('data', (row) => {
      // Generate a unique slug
      const slug = generateSlug(row.name, existingSlugs);
      if (!slug) return; // Skip if we couldn't generate a valid slug
      
      // Clean and transform data
      const business = {
        // business_front_end data
        slug,
        name: row.name?.trim() || null,
        phone: row.phone?.trim() || null,
        street: row.street?.trim() || null,
        city: row.city?.trim() || null,
        postal_code: row.postal_code?.trim() || null,
        state: row.state?.trim() || null,
        latitude: parseFloat(row.latitude) || null,
        longitude: parseFloat(row.longitude) || null,
        rating: parseFloat(row.rating) || null,
        reviews: parseInt(row.reviews) || null,
        review_link: row.reviews_link?.trim() || null,
        working_hours: row.working_hours?.trim() || null,
        logo: row.logo?.trim() || null,
        location_link: row.location_link?.trim() || null,
        location_review_link: row.location_reviews_link?.trim() || null,
        email: row.email_1?.trim() || null,
        facebook: row.facebook?.trim() || null,
        
        // business_details data
        site: row.site?.trim() || null,
        enricher_carrier_type: fileType === 'hvac' 
          ? (row['phone.phones_enricher.carrier_type']?.trim() || null)
          : (row['phone.whitepages_phones.phone_type']?.trim() || null),
        photo_count: parseInt(row.photos_count) || null,
        about: row.about?.trim() || null,
        verified: row.verified === 'TRUE' ? 1 : 0
      };
      
      businesses.push(business);
    })
    .on('end', () => {
      // Insert businesses into database
      insertBusinesses(businesses, callback);
    })
    .on('error', (err) => {
      console.error(`Error processing ${fileType} CSV:`, err.message);
      callback();
    });
}

// Insert businesses into the database
function insertBusinesses(businesses, callback) {
  if (businesses.length === 0) {
    console.log('No businesses to insert.');
    callback();
    return;
  }
  
  // Start a transaction
  db.serialize(() => {
    db.run('BEGIN TRANSACTION');
    
    // Prepare statements
    const frontEndStmt = db.prepare(`
      INSERT INTO business_front_end (
        slug, name, phone, street, city, postal_code, state, 
        latitude, longitude, rating, reviews, review_link, 
        working_hours, logo, location_link, location_review_link, 
        email, facebook
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);
    
    const detailsStmt = db.prepare(`
      INSERT INTO business_details (
        slug, site, enricher_carrier_type, photo_count, about, verified
      ) VALUES (?, ?, ?, ?, ?, ?)
    `);
    
    // Insert each business
    businesses.forEach((business) => {
      try {
        // Insert into business_front_end table
        frontEndStmt.run(
          business.slug,
          business.name,
          business.phone,
          business.street,
          business.city,
          business.postal_code,
          business.state,
          business.latitude,
          business.longitude,
          business.rating,
          business.reviews,
          business.review_link,
          business.working_hours,
          business.logo,
          business.location_link,
          business.location_review_link,
          business.email,
          business.facebook
        );
        
        // Insert into business_details table
        detailsStmt.run(
          business.slug,
          business.site,
          business.enricher_carrier_type,
          business.photo_count,
          business.about,
          business.verified
        );
        
        console.log(`Inserted ${business.slug}`);
      } catch (err) {
        console.error(`Error inserting business ${business.slug}:`, err.message);
      }
    });
    
    // Finalize statements
    frontEndStmt.finalize();
    detailsStmt.finalize();
    
    // Commit transaction
    db.run('COMMIT', (err) => {
      if (err) {
        console.error('Error committing transaction:', err.message);
        db.run('ROLLBACK');
      } else {
        console.log(`Successfully inserted ${businesses.length} businesses.`);
      }
      callback();
    });
  });
}

// Handle process termination
process.on('SIGINT', () => {
  console.log('Process terminated. Closing database connection...');
  db.close();
  process.exit(0);
});